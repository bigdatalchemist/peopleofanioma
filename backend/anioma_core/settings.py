"""
Django settings for anioma_core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from decouple import Config, RepositoryEnv, config
import os
from pathlib import Path
import nltk

# Add NLTK data path globally
NLTK_DATA_PATH = os.path.join(os.path.expanduser("~"), "AppData", "Roaming", "nltk_data")
if NLTK_DATA_PATH not in nltk.data.path:
    nltk.data.path.append(NLTK_DATA_PATH)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment configuration
def get_config():
    try:
        return {
            'SECRET_KEY': os.environ['SECRET_KEY'],  # Will crash if missing (good!)
            'DEBUG': os.environ.get('DEBUG', '') == 'true', # Only true if explicitly set
            'ALLOWED_HOSTS': os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(','),
        }
    except KeyError as e:
        # Local development fallback
        ENV_FILE = BASE_DIR / ".env"
        if ENV_FILE.exists():
            config = Config(RepositoryEnv(str(ENV_FILE)))
            return {
                'SECRET_KEY': config('SECRET_KEY'),
                'DEBUG': config('DEBUG', default=False, cast=bool),
                'ALLOWED_HOSTS': config('ALLOWED_HOSTS', default='127.0.0.1,localhost').split(','),
            }
        raise RuntimeError(f"Missing required environment variable: {e}")

CONFIG = get_config()

# Now use CONFIG throughout your settings
SECRET_KEY = CONFIG['SECRET_KEY']
DEBUG = CONFIG['DEBUG']
ALLOWED_HOSTS = CONFIG['ALLOWED_HOSTS']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'corsheaders',
    'drf_yasg',
    'tailwind',
    'django_browser_reload',
    'widget_tweaks',

    
    # Project apps
    'apps.blog',
    'apps.maps',
    'apps.stories',
    'apps.language_tools',
    'apps.dashboards',
    'apps.diaspora_tracker',
    'apps.ethnographic_survey',
    'apps.public_api',
    'apps.users',
    'apps.pages', 
]

# Custom user model
AUTH_USER_MODEL = 'users.CustomUser'
LOGIN_REDIRECT_URL = 'users:profile'
LOGOUT_REDIRECT_URL = 'users:login'


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django_browser_reload.middleware.BrowserReloadMiddleware',
]


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
}


ROOT_URLCONF = "backend.anioma_core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "backend" / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.anioma_core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if config("DB_ENGINE", default="sqlite") == "postgres":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("DB_NAME"),
            "USER": config("DB_USER"),
            "PASSWORD": config("DB_PASSWORD"),
            "HOST": config("DB_HOST"),
            "PORT": config("DB_PORT", default="5432"),
            "OPTIONS": {
                'sslmode': 'require'  # Required for Render PostgreSQL
            }
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Africa/Lagos"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
MEDIA_URL = "/media/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
    BASE_DIR / "data",  # ‚Üê Now includes your GeoJSON files
]

STATIC_ROOT = BASE_DIR.parent / "staticfiles" 
MEDIA_ROOT = BASE_DIR.parent / "media"
# For compression and caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# For non-Django files (optional)
WHITENOISE_ROOT = BASE_DIR / 'root_files'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DEBUG = config("DEBUG", default=True, cast=bool)
IS_PRODUCTION = not DEBUG

if IS_PRODUCTION:
    CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", default="").split(",")
else:
    CSRF_TRUSTED_ORIGINS = [
        "http://127.0.0.1:8000",
        "http://localhost:8000",
    ]

# Clean invalid entries just in case
CSRF_TRUSTED_ORIGINS = [
    origin for origin in CSRF_TRUSTED_ORIGINS if origin.startswith("http")
]


SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", default=IS_PRODUCTION, cast=bool)
SESSION_COOKIE_SECURE = config("SESSION_COOKIE_SECURE", default=IS_PRODUCTION, cast=bool)
CSRF_COOKIE_SECURE = config("CSRF_COOKIE_SECURE", default=IS_PRODUCTION, cast=bool)

CORS_ALLOW_ALL_ORIGINS = not IS_PRODUCTION
